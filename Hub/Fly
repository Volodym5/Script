local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Flying Variables
local flying = false
local speed = 50  -- Default speed
local bodyVelocity
local bodyGyro
local toggleEnabled = false

local function initializeCharacter()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")
    
    return player, character, humanoid, rootPart
end

local function startFlying()
    local player, character, humanoid, rootPart = initializeCharacter()
    if flying or not player or not character or not humanoid or not rootPart then
        print("Cannot start flying: Character or components not found.")
        return
    end
    
    flying = true

    bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
    bodyVelocity.P = 10000
    bodyVelocity.Parent = rootPart

    bodyGyro = Instance.new("BodyGyro")
    bodyGyro.CFrame = rootPart.CFrame
    bodyGyro.MaxTorque = Vector3.new(500000, 500000, 500000)
    bodyGyro.P = 500000
    bodyGyro.Parent = rootPart

    humanoid.PlatformStand = true

    -- Update Flying
    RunService.RenderStepped:Connect(function()
        if flying then
            local camera = workspace.CurrentCamera
            local moveDirection = (UserInputService:IsKeyDown(Enum.KeyCode.W) and camera.CFrame.LookVector or Vector3.new(0, 0, 0)) +
                                 (UserInputService:IsKeyDown(Enum.KeyCode.S) and -camera.CFrame.LookVector or Vector3.new(0, 0, 0)) +
                                 (UserInputService:IsKeyDown(Enum.KeyCode.A) and -camera.CFrame.RightVector or Vector3.new(0, 0, 0)) +
                                 (UserInputService:IsKeyDown(Enum.KeyCode.D) and camera.CFrame.RightVector or Vector3.new(0, 0, 0))

            bodyVelocity.Velocity = moveDirection * speed
            bodyGyro.CFrame = camera.CFrame
        end
    end)
end

local function stopFlying()
    if not flying then return end
    flying = false

    if bodyVelocity then
        bodyVelocity:Destroy()
    end
    if bodyGyro then
        bodyGyro:Destroy()
    end
    local player, character, humanoid, rootPart = initializeCharacter()
    if humanoid then
        humanoid.PlatformStand = false
    end
end

-- Listen for Character Added event
game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
    if toggleEnabled and flying then
        stopFlying()
    end
end)

-- Toggle Flying when 'E' is pressed
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.E and toggleEnabled then
        if flying then
            stopFlying()
        else
            startFlying()
        end
    end
end)

-- Function to update fly speed based on slider value
local function updateFlySpeed(value)
    speed = value
    if flying and bodyVelocity then
        bodyVelocity.Velocity = bodyVelocity.Velocity.Unit * speed
    end
end

-- Expose functions to toggle flying and update fly speed
_G.ToggleFlying = function(state)
    toggleEnabled = state
    if not toggleEnabled and flying then
        stopFlying()
    end
end

_G.UpdateFlySpeed = updateFlySpeed

-- Initial setup
initializeCharacter()  -- Attempt to initialize character on script start
